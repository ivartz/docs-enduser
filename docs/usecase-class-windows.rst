Usecase: CS Course with individual Windows instances for students
=================================================================

Last changed: 2024-09-22

.. contents::

.. _Terraform: https://www.terraform.io/
.. _Ansible: https://www.ansible.com/
.. _Terraform and NREC\: Part I - Basics: terraform-part1.html
.. _Terraform and NREC\: Part II - Additional resources: terraform-part2.html
.. _Terraform and NREC\: Part III - Dynamics: terraform-part3.html
.. _Terraform and NREC\: Part IV - Pairing with Ansible: terraform-part4.html
.. _OpenStack CLI tools: api.html

This document describes and tries to offer a solution on how to spin
up an arbitrary number of Windows Server instances. The idea is that
each student is given their own pre-configured instance with a set of
credentials.

.. WARNING: This document is under development and may contain errors


Overview
--------

In this usecase study, we will demonstrate with examples and code the
entire process:

#. Install a master Windows instance, which we will later use as a
   template for new instances

#. Do whatever configuration changes, install software etc. that is
   required. All changes that should be identical on the students'
   instances should be done in this step

#. Make a snapshot of the master instance. This is the template
   template that will be used in the next step

#. Use Terraform_ to spin up a number of instances for students based
   on the template created in the previous step

#. Use Ansible_ to make individual configuration on each of the
   student instances. I our case we add an individual user with an
   autogenerated password for each instance


Prerequisites
-------------

This guide assumes that you have installed and know how to use
Terraform_ and Ansible_. For more information, see

* `Terraform and NREC\: Part I - Basics`_
* `Terraform and NREC\: Part II - Additional resources`_
* `Terraform and NREC\: Part III - Dynamics`_
* `Terraform and NREC\: Part IV - Pairing with Ansible`_

You also need to have the `OpenStack CLI tools`_ installed.


Preparing the master Windows instance
-------------------------------------

.. _Create a Windows virtual machine: create-windows-machine.html

For this step, consult the documentation available here:

* `Create a Windows virtual machine`_

In our case, the master instance is named "master". Make sure to
create and apply security groups that allow connecting to the master
instance using SSH and RDP.

In order to configure the master Windows instance, we first log in
using SSH::

  ssh -l Admin <IP-address>

We then set a new password for the Admin user::

  Microsoft Windows [Version 10.0.20348.2655]
  (c) Microsoft Corporation. All rights reserved.
  
  admin@MASTER C:\Users\Admin>net user Admin <new-password>
  The command completed successfully.

FIXME: Doesn't survive reboot!

Next, we log into the master instance via GUI, either via RDP or via
the console in the NREC dashboard.

Then, install software and make any changes as required.

Finally in this step, reboot the instance.


Take a snapshot
---------------

.. _Creating a snapshot image: create-windows-machine.html#creating-a-snapshot-image

The procedure for creating a snapshot is described here:

* `Creating a snapshot image`_

We will name the snapshot "master-snap-01".


Create student instances
------------------------

This next step uses Terraform_ to create a number of instances for
students. First, create an empty directory and cd into it, e.g.::

  mkdir ~/myproject
  cd ~/myproject

Copy the following files info this directory:

* :download:`main.tf <downloads/usecase01/main.tf>`
* :download:`secgroup.tf <downloads/usecase01/secgroup.tf>`
* :download:`variables.tf <downloads/usecase01/variables.tf>`
* :download:`terraform.tfvars <downloads/usecase01/terraform.tfvars>`

Edit these files to suit your needs. You should most likely want a lot
of changes in ``variables.tf`` and ``terraform.tfvars``.

Run **terraform init**::

  $ terraform init
  ...
  Terraform has been successfully initialized!

Run **terraform plan**::

  $ terraform plan
  ...
  Plan: 29 to add, 0 to change, 0 to destroy.

Fix any errors from the plan command, then run **terraform apply**::

  $ terraform apply
  ...
  Apply complete! Resources: 29 added, 0 changed, 0 destroyed.

The instances are now created, we are ready to make the final
configuration with Ansible_.


Configure student instances
---------------------------

Download the following files into the same directory as the Terraform
files:

* :download:`terraform.yaml <downloads/usecase01/terraform.yaml>`
* :download:`add-labuser.yaml <downloads/usecase01/add-labuser.yaml>`

Edit these files as necessary. At minimum you need to edit the
``terraform.yaml`` file.

Test that ansible works::

  $ ansible -i terraform.yaml all -m win_ping

Run the ``add-labuser.yaml`` playbook::

  $ ansible-playbook -i terraform.yaml add-labuser.yaml

The credentials are saved in a file called ``labusers.csv``, which is
located in the same directory as the playbook. Example contents::

  HOST,IPADDR,USERNAME,PASSWORD
  in9999-h2024-lab-0,2001:700:2:8201::100e,labuser,Msho!nLKCCo)yIAvB$UC
  in9999-h2024-lab-1,2001:700:2:8201::1270,labuser,cXhm_q%xvwvBmLM6rPF6
  in9999-h2024-lab-2,2001:700:2:8201::1485,labuser,sGecTMBp0u11x0.OpEGn


Adding more instances
---------------------

If we want to add more instances, all we need to do is to increase the
number in ``variables.cf``::

  variable "role_count" {
    type = map(string)
    default = {
      "students" = <new number>
    }
  }

Then run::

  terraform plan
  terraform apply

Create users with::
  
  ansible-playbook -i terraform.yaml add-labuser.yaml

The credentials for new hosts will be added to the ``labusers.csv``
file.
